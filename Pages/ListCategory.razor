@page "/category"
@using BlazeUTS.Models
@using BlazeUTS.Service
@inject CategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
<PageTitle>Category</PageTitle>

<AuthorizeView>
    <Authorized>

@if (_errorMessage != null)
{
    <div class="alert alert-danger">
        @_errorMessage
        @if (_isUnauthorized)
        {
            <button class="btn btn-link" @onclick="RedirectToLogin">Login Again</button>
        }
    </div>
}

@if (categories == null)
{
    <p>Loading...</p>
}
else
{
    // Your existing category list UI
<h3>Categories</h3>
<div class="d-flex align-items-center">
    <input class="form-control me-2" type="search" aria-label="Search" @oninput="OnSearchChanged" placeholder="Search Category..." style="width: 200px;" />
    <button class="btn btn-outline-dark" @onclick="AddCategory"><i class="bi bi-plus-square"></i> Add Category</button>
</div>
    <table class="table mt-3">
        <thead>
            <tr>
                <th>No</th>
                <th>Category Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @{
                var rowNumber = 1;
            }
            @foreach (var category in filteredCategories)
            {
                <tr>
                    <td>@rowNumber</td>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-outline-primary" title="Edit Category" @onclick="() => EditCategory(category.CategoryId)">
                            <i class="bi bi-pencil-square"></i> Edit
                        </button>
                        <button class="btn btn-outline-danger" title="Delete Category" @onclick="() => DeleteCategory(category.CategoryId)">
                            <i class="bi bi-trash-fill"></i> Delete
                        </button>
                    </td>
                </tr>
                rowNumber++;
            }
        </tbody>
    </table>
}
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            Please <button class="btn btn-link" @onclick="RedirectToLogin">login</button> to view categories.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Category> categories = new List<Category>();
    private List<Category> filteredCategories => categories
        .Where(c => string.IsNullOrWhiteSpace(searchTerm) || c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private string _errorMessage;
    private bool _isUnauthorized;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetCategoryAsync();
            _errorMessage = null;
            _isUnauthorized = false;
        }
        catch (UnauthorizedAccessException)
        {
            _errorMessage = "Please login to view categories.";
            _isUnauthorized = true;
        }
        catch (Exception ex)
        {
            _errorMessage = "Error loading categories. Please try again later.";
            _isUnauthorized = false;
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void AddCategory()
    {
        NavigationManager.NavigateTo("/add-category");
    }

    private void EditCategory(int id)
    {
        NavigationManager.NavigateTo($"/edit-category/{id}");
    }

    private async Task DeleteCategory(int id)
    {
        var confirmed = await ConfirmDelete();
        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteCategoryAsync(id);
                categories = await CategoryService.GetCategoryAsync(); // Refresh the category list
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting category: {ex.Message}");
            }
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        return await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
    }
}
